---
import { Icon } from 'astro-icon/components';

import Logo from '@/components/logo/logo';

import ThemeToggle from './ThemeToggle.astro';

const { pathname } = Astro.url;

const navigation = [
  { name: 'Home', href: '/' },
  { name: 'Blog', href: '/blog' },
  { name: 'About', href: '/about' },
];

// Function to check if a nav item is active
const isActive = (href: string) => {
  if (href === '//' || href === '/') {
    return pathname === '/';
  }
  return pathname.startsWith(href);
};
---

<header
  class="sticky top-0 z-50 w-full border-b border-border/40 bg-background/80 backdrop-blur-xl transition-all"
  id="header"
>
  <nav
    class="mx-auto flex max-w-7xl items-center justify-between p-4 sm:px-6 lg:px-8"
    aria-label="Global"
  >
    <div class="flex items-center gap-x-12">
      <a
        href="/"
        class="flex items-center gap-2 transition-opacity hover:opacity-80"
        aria-label="Go to homepage"
      >
        <Logo class="h-10" with_text={true} />
      </a>
      <div class="hidden md:flex md:gap-x-8">
        <div class="relative">
          <div class="flex items-center gap-x-6">
            {
              navigation.map(item => (
                <a
                  href={item.href}
                  class:list={[
                    'relative px-2 py-1 text-sm font-medium transition-colors duration-300',
                    isActive(item.href)
                      ? 'text-primary'
                      : 'text-muted-foreground hover:text-primary',
                  ]}
                  aria-current={isActive(item.href) ? 'page' : undefined}
                >
                  {/* Single background indicator that transitions */}
                  {isActive(item.href) && (
                    <div
                      transition:name="active"
                      class="absolute inset-0 -z-10 rounded-md bg-gradient-to-r from-purple-500/10 via-purple-400/10 to-purple-500/10 transition-all duration-300"
                    />
                  )}

                  {item.name}
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>
    <div class="flex items-center gap-4">
      <ThemeToggle />
      <button
        type="button"
        class="group -m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-muted-foreground transition-colors hover:text-foreground md:hidden"
        aria-expanded="false"
        aria-label="Toggle navigation menu"
        id="toggle-nav"
      >
        <div class="relative h-6 w-6">
          <span
            class="absolute block h-0.5 w-6 bg-current transition-all duration-300 group-aria-expanded:top-2 group-aria-expanded:rotate-45"
            style="top: 8px;"></span>
          <span
            class="absolute top-2 block h-0.5 w-6 bg-current transition-all duration-300 group-aria-expanded:opacity-0"
          ></span>
          <span
            class="absolute block h-0.5 w-6 bg-current transition-all duration-300 group-aria-expanded:bottom-2 group-aria-expanded:-rotate-45"
            style="bottom: 8px;"></span>
        </div>
      </button>
    </div>
  </nav>

  <!-- Mobile menu -->
  <div
    class="fixed inset-0 z-50 hidden bg-background/80 backdrop-blur-sm"
    id="mobile-menu"
    aria-hidden="true"
  >
    <div
      class="fixed inset-y-0 right-0 z-50 w-full overflow-y-auto bg-background px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-border/10"
    >
      <div class="flex items-center justify-between">
        <a href="/" class="-m-1.5 p-1.5">
          <Logo class="h-8" with_text={true} />
        </a>
        <button
          type="button"
          class="-m-2.5 rounded-md p-2.5 text-muted-foreground"
          aria-label="Close menu"
          id="close-nav"
        >
          <Icon name="lucide:x" class="h-6 w-6" />
        </button>
      </div>
      <div class="mt-6 flow-root">
        <div class="-my-6 divide-y divide-border">
          <div class="space-y-2 py-6">
            {
              navigation.map(item => (
                <a
                  href={item.href}
                  class:list={[
                    '-mx-3 block rounded-lg px-3 py-2 text-base font-semibold transition-colors',
                    isActive(item.href)
                      ? 'bg-gradient-to-r from-purple-500/10 via-purple-400/10 to-purple-500/10 text-purple-700 dark:text-purple-300'
                      : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground',
                  ]}
                  aria-current={isActive(item.href) ? 'page' : undefined}
                >
                  {item.name}
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    // Handle scroll effects
    const header = document.getElementById('header');

    const handleScroll = () => {
      const currentScroll = window.scrollY;
      if (currentScroll <= 0) {
        header?.classList.remove('border-border/40');
        header?.classList.remove('shadow-sm');
      } else {
        header?.classList.add('border-border/40');
        header?.classList.add('shadow-sm');
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Check initial scroll position

    // Handle mobile menu
    const toggleNav = document.getElementById('toggle-nav');
    const closeNav = document.getElementById('close-nav');
    const mobileMenu = document.getElementById('mobile-menu');

    const toggleMenu = () => {
      const isExpanded = toggleNav?.getAttribute('aria-expanded') === 'true';
      toggleNav?.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu?.classList.toggle('hidden');
      document.body.classList.toggle('overflow-hidden');
    };

    toggleNav?.addEventListener('click', toggleMenu);
    closeNav?.addEventListener('click', toggleMenu);

    // Close mobile menu on navigation
    const mobileLinks = mobileMenu?.getElementsByTagName('a');
    if (mobileLinks) {
      Array.from(mobileLinks).forEach(link => {
        link.addEventListener('click', () => {
          toggleMenu();
        });
      });
    }
  });
</script>
