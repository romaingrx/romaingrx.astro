---
import { getCollection, render, type CollectionEntry } from 'astro:content';

interface Props {
  type?: 'education' | 'experience' | 'project';
  title: string;
}

const { type, title } = Astro.props;

// Get timeline entries
const entries = await getCollection('timeline');
const filteredEntries = type
  ? entries.filter((entry: CollectionEntry<'timeline'>) => entry.data.type === type)
  : entries;

// Sort items by date (most recent first)
const sortedItems = [...filteredEntries].sort((a, b) => {
  const dateA = a.data.endDate === 'present' ? new Date() : new Date(a.data.startDate);
  const dateB = b.data.endDate === 'present' ? new Date() : new Date(b.data.startDate);
  return dateB.getTime() - dateA.getTime();
});

// Pre-render all content
const renderedContent = await Promise.all(
  sortedItems.map(async (item: CollectionEntry<'timeline'>) => {
    const rendered = await render(item);
    return {
      item,
      Content: rendered.Content,
    };
  })
);
---

<div class="flex flex-col">
  <h1
    class="font-wise mb-16 bg-gradient-to-r from-purple-400 to-purple-600 bg-clip-text text-center text-5xl text-transparent"
  >
    {title}
  </h1>

  <div class="relative">
    {/* Vertical Line */}
    <div class="absolute left-[29px] top-0 h-full w-0.5 bg-purple-300/50 dark:bg-purple-500/20">
    </div>

    <div class="space-y-16">
      {
        renderedContent.map(({ item, Content }) => (
          <div class="relative ml-20">
            {/* Timeline Dot */}
            {/*
            <div class="absolute left-[60px] top-0 flex items-center justify-center">
              <div class="relative h-[30px] w-[30px] rounded-full bg-purple-100 dark:bg-purple-900/30">
                <div class="absolute left-1/2 top-1/2 h-3 w-3 -translate-x-1/2 -translate-y-1/2 rounded-full bg-purple-500" />
              </div>
            </div>
             */}

            {/* Content */}
            <div class="min-h-[60px]">
              {/* Header */}
              <div class="flex flex-col gap-1">
                <h3 class="text-2xl font-semibold">{item.data.title}</h3>
                <div>
                  {item.data.organization_url ? (
                    <a
                      href={item.data.organization_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-base text-purple-500 hover:underline"
                    >
                      {item.data.organization}
                    </a>
                  ) : (
                    <span class="text-base text-purple-500">{item.data.organization}</span>
                  )}
                </div>
                <div class="text-base text-muted-foreground">
                  {item.data.startDate} - {item.data.endDate} â€¢ {item.data.location}
                </div>
              </div>

              {/* Description */}
              <div class="prose prose-sm dark:prose-invert mt-4">
                <Content />
              </div>

              {/* Tags */}
              {item.data.tags && item.data.tags.length > 0 && (
                <div class="mt-4 flex flex-wrap gap-2">
                  {item.data.tags.map((tag: string) => (
                    <span class="inline-flex items-center rounded-full bg-purple-100 px-3 py-1 text-xs font-medium text-purple-800 dark:bg-purple-900/30 dark:text-purple-200">
                      {tag}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>
