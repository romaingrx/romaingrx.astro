---
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';

import TagBadge from '@/components/blog/tag-badge.astro';
import type { BlogPostWithAuthors } from '@/lib/collections';

import BaseLayout from './BaseLayout.astro';

interface Props {
  blog: BlogPostWithAuthors;
}

const {
  blog: {
    id,
    data: { title, description, cover, published_date, updated_date, categories, tags },
    authors,
    readingTime,
    slug,
  },
} = Astro.props;

// Format dates
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

const ogImage = `/og/${slug}.png`;
---

<BaseLayout title={title} description={description} ogImage={ogImage}>
  <article class="container relative mx-auto px-4 py-12 md:py-24">
    {
      cover && (
        <div class="relative mb-8 h-[400px] w-full overflow-hidden rounded-lg md:mb-12 md:h-[500px]">
          <Image
            src={cover}
            alt={`Cover image for ${title}`}
            class="h-full w-full object-cover"
            transition:name={`hero-${id}`}
            width={1200}
            height={600}
          />
        </div>
      )
    }

    <div class="mx-auto max-w-3xl">
      <header class="mb-12 space-y-6 text-center md:mb-16">
        {/* Categories */}
        <div class="flex flex-wrap items-center justify-center gap-2">
          {
            categories.map((category: string) => (
              <a
                href={`/blog/category/${category}`}
                class="inline-flex items-center gap-1.5 rounded-full bg-muted px-3 py-1 text-sm font-medium text-muted-foreground transition-colors hover:bg-muted/80 hover:text-foreground"
              >
                <Icon name="lucide:folder" class="h-4 w-4" />
                <span>{category}</span>
              </a>
            ))
          }
        </div>

        {/* Title and Description */}
        <div class="space-y-4">
          <h1 class="text-4xl font-bold leading-tight tracking-tighter md:text-5xl lg:text-6xl">
            {title}
          </h1>
          {
            description && (
              <p class="mx-auto max-w-[700px] text-lg text-muted-foreground md:text-xl">
                {description}
              </p>
            )
          }
        </div>

        {/* Metadata */}
        <div class="flex flex-wrap items-center justify-center gap-6">
          {/* Authors */}
          <div class="flex items-center gap-2">
            <Icon name="lucide:users" class="h-5 w-5 text-muted-foreground" />
            {
              authors.map((author, index) => (
                <>
                  <a
                    href={`/author/${author.id}`}
                    class="font-medium text-muted-foreground transition-colors hover:text-foreground"
                  >
                    {author.data.name}
                  </a>
                  {index < authors.length - 1 && <span class="text-muted-foreground">,</span>}
                </>
              ))
            }
          </div>

          {/* Reading Time */}
          <div class="flex items-center gap-2 text-muted-foreground">
            <Icon name="lucide:clock" class="h-5 w-5" />
            <span class="font-medium">{readingTime}</span>
          </div>

          {/* Dates */}
          <div class="flex items-center gap-6">
            <div class="flex items-center gap-2 text-muted-foreground">
              <Icon name="lucide:calendar" class="h-5 w-5" />
              <time datetime={published_date.toISOString()} class="font-medium"
                >{formatDate(published_date)}</time
              >
            </div>
            {
              updated_date && (
                <div class="flex items-center gap-2 text-muted-foreground">
                  <Icon name="lucide:edit" class="h-5 w-5" />
                  <time datetime={updated_date.toISOString()} class="font-medium">
                    Updated {formatDate(updated_date)}
                  </time>
                </div>
              )
            }
          </div>
        </div>

        {/* Tags */}
        <div class="flex flex-wrap items-center justify-center gap-2">
          {tags?.map((tag: string) => <TagBadge tag={tag} />)}
        </div>
      </header>

      <div
        class="prose prose-gray dark:prose-invert md:prose-lg lg:prose-xl prose-headings:font-bold prose-headings:tracking-tight prose-h1:text-4xl prose-h2:text-3xl prose-h3:text-2xl prose-p:text-base prose-p:leading-7 prose-a:text-primary prose-a:no-underline hover:prose-a:underline prose-strong:font-semibold prose-code:rounded-sm prose-code:bg-muted prose-code:px-1 prose-code:py-0.5 prose-code:font-normal prose-pre:rounded-lg prose-pre:bg-muted prose-img:rounded-lg prose-hr:border-border mx-auto max-w-none [&_:not(pre)>code]:text-primary"
      >
        <slot />
      </div>
    </div>
  </article>
</BaseLayout>
